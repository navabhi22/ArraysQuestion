448. Find All Numbers Disappeared in an Array
Easy
8.2K
428
Companies

Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.

 

Example 1:

Input: nums = [4,3,2,7,8,2,3,1]
Output: [5,6]

Example 2:

Input: nums = [1,1]
Output: [2]

 

Constraints:

    n == nums.length
    1 <= n <= 105
    1 <= nums[i] <= n

 

Follow up: Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space
//O(n) space O(n) time
class Solution {
    public List<Integer> findDisappearedNumbers(int[] arr) {
        int n=arr.length;
        int[] ans= new int[n];
        for(int i=0;i<n;i++){
            ans[arr[i]-1]=arr[i];
        }
        List<Integer> list = new ArrayList<Integer>();
        for(int i=0;i<n;i++){
            if(ans[i]==0){
                list.add(i+1);
            }
        }
        return list;
    }
}

//O(n) time O(1) space
class Solution {
    public List<Integer> findDisappearedNumbers(int[] arr) {
        int n=arr.length;
        for(int i=0;i<n;i++){
            int idx=Math.abs(arr[i])-1;
            if(arr[idx]>0){
                arr[idx]=-arr[idx];
            }
        }
        List<Integer> list = new ArrayList<Integer>();
        for(int i=0;i<n;i++){
            if(arr[i]>0){
                list.add(i+1);
            }
        }
        return list;
    }
}
