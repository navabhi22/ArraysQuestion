

//divide by approach
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int prod=1;
        int product=1;
        int count =0;
        for(int i=0; i< nums.length; i++){
            if(nums[i]!=0){
                prod= prod*nums[i];
            }else{
                count++;
            }
            product=product*nums[i];
        }
        int[] sol = new int[nums.length];
        for( int i=0 ; i<sol.length;i++){
            if(count>1){
                sol[i]=0;
            }else{
                if(nums[i]==0){
                    sol[i]=prod;
                }else{
                    sol[i]=product/nums[i];
                }
            }
        }
        return sol;
    }
}



//two pointer two array approach, using extra space to improve time
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int l=1;
        int r=1;
        int[] left = new int[nums.length];
        int[] right = new int[nums.length];
        for(int i=0; i<nums.length; i++){
            left[i]=l;
            l=l*nums[i];
            right[nums.length-1-i]=r;
            r=r*nums[nums.length-1-i];
        }
        int[] sol=new int[nums.length];
        for(int i=0; i<sol.length; i++){
            sol[i]=left[i]*right[i];
        }
        return sol;
    }
}
