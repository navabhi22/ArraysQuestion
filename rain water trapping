// two array (left max and right max ) approach , complexity time = O(n), space = O(n)
class Solution {
    public int trap(int[] height) {
        int n =height.length;
        int[] l = new int[n];
        int[] r = new int[n];
        int lmax=0;
        int rmax=0;
        for(int i=0; i<n;i++){
            l[i]=lmax;
            lmax=Math.max(height[i],lmax);
            r[n-i-1]=rmax;
            rmax=Math.max(height[n-i-1],rmax);
           
        } 
        int totWater=0;
        for(int i=0; i<n;i++){
            int currWater=Math.min(l[i],r[i]);
            currWater=currWater-height[i];
            if(currWater>0){
                totWater=totWater+currWater;
            }    
        }
        return totWater;
    }
}


// best optimezed approach two pointer  complexity time=O(n), space =O(1)

class Solution {
    public int trap(int[] height) {
        int n =height.length;
        int lmax=0;
        int rmax=0;
        int l=0, r=n-1;
        int ans=0;
        while(l<r){
            if(height[l]<height[r]){
                if(height[l]>=lmax){    
                    lmax=height[l];
                }else{
                    ans = ans + lmax-height[l];
                }
                l++;
            }
            else{
                if(height[r]>=rmax){
                    rmax=height[r];
                }else{
                    ans=ans + rmax-height[r];
                }
                r--;
            }
        }
        return ans;
    }
}
