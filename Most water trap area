

Given n non-negative integers a1, a2, â€¦, an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.

Note: You may not slant the container and n is at least 2.

Input Format

First line contains single integer n denoting the size of the array.
Next line contains n space separated integers denoting the array.
Constraints

2 <= N <= 10^6
0 <= A[i] <= 10^5
Output Format

Print a single integer denoting the max area possible.
Sample Input

9
1 8 6 2 5 4 8 3 7

Sample Output

49


import java.util.*;
public class Main {
    public static void main (String args[]) {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int[] arr = new int[n];
        for(int i=0; i<n;i++){
            arr[i]=scn.nextInt();
        }
        System.out.println(trap(arr,n));
    }
    //efficent approach O(n)
    public static int trap(int[] arr, int n){
        int max=0;
        int i=0; int j=n-1;
        while(i<j){
            int area = (Math.min(arr[i],arr[j]))*(j-i);
            max = Math.max(area,max);
            if(arr[i]<arr[j]){
                i++;
            }else{
                j--;
            }
        }
        return max;
    }
    //brute force O(n^2)
    public static int water(int[] arr, int n){
        int max = 0;
        for(int i=0; i<n;i++){
            for(int j=i+1; j<n;j++){
                int area = (Math.min(arr[i],arr[j]))*(j-i);
                max= Math.max(area,max);
            }
        }
        return max;
    }
}
